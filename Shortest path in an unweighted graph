Shortest path in an unweighted graph
// Java program to find shortest path in an undirected
// graph
import java.util.*;
public class Graph 
{
	static int V=8;
	public static void addEdge(ArrayList<ArrayList<Integer>> adj, int i, int j)
	{
		adj.get(i).add(j);
		adj.get(j).add(i);
	}
	public static boolean shortestpathBFS(int src,int dest,ArrayList<ArrayList<Integer>> adj,int dist[],int pred[],boolean visited[])
	{
		
		Queue<Integer> q = new LinkedList<>();
		dist[src]=0;
		pred[0]=-1;
		q.add(src);
		visited[src]=true;
		while(!q.isEmpty())
		{
			int u = q.remove();
			for(Integer child:adj.get(u))
			{
				if(!visited[child])
				{
					dist[child]=dist[u]+1;
					pred[child]=u;
					visited[child]=true;
					q.add(child);
					if(child==dest)
						return true;;
				}
			}
		}
		/*// LinkedList to store path
        LinkedList<Integer> path = new LinkedList<Integer>();
        int crawl = dest;
        path.add(crawl);
        while (pred[crawl] != -1) {
            path.add(pred[crawl]);
            crawl = pred[crawl];
        }
 
        // Print distance
        System.out.println("Shortest path length is: " + dist[dest]);
 
        // Print path
        System.out.println("Path is ::");
        for (int i = path.size() - 1; i >= 0; i--) {
            System.out.print(path.get(i) + " ");
        }*/
		return false;
	}
	public static void main(String args[])
	{
		int v = 8;
		int dist[] = new int[V];
		int pred[] = new int[V];
		boolean visited[] = new boolean[V];
		for(int i=0;i<V;i++)
		{
			pred[i]=-1;
			dist[i]=Integer.MAX_VALUE;
			visited[i]=false;
		}
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>(v);
		for (int i = 0; i < v; i++) 
		{
			adj.add(new ArrayList<Integer>());
		}
		addEdge(adj, 0, 1);
		addEdge(adj, 0, 3);
		addEdge(adj, 1, 2);
		addEdge(adj, 3, 4);
		addEdge(adj, 3, 7);
		addEdge(adj, 4, 5);
		addEdge(adj, 4, 6);
		addEdge(adj, 4, 7);
		addEdge(adj, 5, 6);
		addEdge(adj, 6, 7);
		int src=0;
		int dest=7;
		if((shortestpathBFS(src,dest,adj,dist,pred,visited)==true))
			System.out.println("The distance between source to destination: "+ dist[dest]);
		else
			System.out.println("Sorry No Path: ");
	}
}
