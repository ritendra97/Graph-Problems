//Detect cycle in an undirected graph
import java.util.*;
public class GraphProblem 
{
	static void addEdges(ArrayList<ArrayList<Integer>> adj,int v,int w)
	{
		adj.get(v).add(w);
		adj.get(w).add(v);
	}
	static boolean ifcycleexist(ArrayList<ArrayList<Integer>> adj,boolean visited[],int v)
	{
		for(int i=0;i<v;i++)
		{
			if(!visited[i])
			{
				if(iscycle(adj,visited,-1,i))// Here -1 indecates that that is it's starting point.
					return true;
			}
		}
		return false;
	}
	static boolean iscycle(ArrayList<ArrayList<Integer>> adj,boolean visited[],int parent,int index)
	{
		visited[index]=true;
		List<Integer> childList = adj.get(index);
		for(Integer child:childList)
		{
			if(!visited[child])
			{
				iscycle(adj,visited,index,child);
			}
			else if(child!=parent)
			{
				return true;
			}
		}
		return false;
	}
	public static void main(String[] args) 
	{
		int v=5;
		boolean visited[] = new boolean[v];
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
		for(int i=0;i<v;i++)
		{
			adj.add(i , new ArrayList<Integer>());
		}
		addEdges(adj,1,0);
		addEdges(adj,0,2);
		addEdges(adj,2,1);
		addEdges(adj,0,3);
		addEdges(adj,3,4);
		System.out.println(ifcycleexist(adj,visited,v));
	}
}
