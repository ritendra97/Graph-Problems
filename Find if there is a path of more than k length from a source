import java.util.ArrayList;

class GraphNode{
    int v;
    int weight;

    public GraphNode(int v, int weight) {
        this.v = v;
        this.weight = weight;
    }
}

public class Main6 {

    private int v;
    ArrayList<ArrayList<GraphNode>> graph;
    public Main6(int V){
        v=V;
        graph = new ArrayList<>();
        for(int i =0;i<=V;i++){
            graph.add(new ArrayList<GraphNode>());
        }
    }

    public void addEdge(int u, int v, int weight){
        GraphNode node = new GraphNode(v,weight);
        graph.get(u).add(node);
        GraphNode node1 = new GraphNode(u,weight);
        graph.get(v).add(node1);
    }

    public boolean pathMoreThanK(int s, int k,boolean visited[]){

        if(k<0){
            return true;
        }
        visited[s]=true;
        for (GraphNode gn:graph.get(s)){
            if(!visited[gn.v]){
                if(pathMoreThanK(gn.v,k- gn.weight,visited)) return true;
            }
        }
        visited[s]=false;
        return false;
    }

    public static void main(String[] args){
        int V = 9;
        Main6 g = new Main6(V);

        g.addEdge(0, 1, 4 );
        g.addEdge(0, 7, 8 );
        g.addEdge(1, 2, 8 );
        g.addEdge(1, 7, 11);
        g.addEdge(2, 3, 7 );
        g.addEdge(2, 8, 2 );
        g.addEdge(2, 5, 4 );
        g.addEdge(3, 4, 9 );
        g.addEdge(3, 5, 14);
        g.addEdge(4, 5, 10);
        g.addEdge(5, 6, 2 );
        g.addEdge(6, 7, 1 );
        g.addEdge(6, 8, 6 );
        g.addEdge(7, 8, 7 );

        boolean visited[] = new boolean[V];
        System.out.println(g.pathMoreThanK(0,60,visited));
    }
}
