//Level of Each node in a Tree from source node (using BFS)
import java.util.*;
public class GraphProblem 
{
    private int V;
    ArrayList<ArrayList<Integer>> graph;
    boolean Visited[];
    int level[];
    GraphProblem(int v)
    {
    	V=v;
    	Visited=new boolean[V];
    	level = new int[V];
    	graph = new ArrayList<ArrayList<Integer>>(V);
    	for(int i =0;i<V;i++)
    	{
    		graph.add(i,new ArrayList<Integer>());
    	}
    }
	public void addEdge(int v,int w)
	{
		graph.get(v).add(w);
	}
    public void BFSUtil(int s)
    {
    	Queue<Integer> q = new LinkedList<>();
    	level[s]=0;
    	Visited[s]=true;
    	q.add(s);
    	while(!q.isEmpty())
    	{
    		int temp = q.remove();
    		System.out.println("Level of: "+temp+" -> "+level[temp]);
    		List<Integer> childList = graph.get(temp);
    		for(Integer child: childList)
    		{
    			if(!Visited[child])
    			{
    				Visited[child]=true;
    				level[child]=level[temp]+1;
    				q.add(child);
    			}
    		}
    	}
    }
    public void levelofeachnode(int i)
    {
    	BFSUtil(i);
    }
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(8);
		g.addEdge(0,1);
		g.addEdge(0,2);
		g.addEdge(1,3);
		g.addEdge(1,4);
		g.addEdge(1,5);
		g.addEdge(2,5);
		g.addEdge(2,6);
		g.addEdge(6,7);
		g.levelofeachnode(0);
	}
}
