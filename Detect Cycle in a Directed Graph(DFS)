Detect Cycle in a Directed Graph(DFS)
import java.util.*;
public class GraphProblem 
{
	static void addEdges(ArrayList<ArrayList<Integer>> adj,int v,int w)
	{
		adj.get(v).add(w);
	}
	static boolean checkDFS(ArrayList<ArrayList<Integer>> adj,boolean visited[],boolean recursion[],int v)
	{
		for(int i=0;i<v;i++)
		{
			if(iscycleExist(adj,visited,recursion,i))
				return true;
		}
		return false;
	}
	static boolean iscycleExist(ArrayList<ArrayList<Integer>> adj,boolean visited[],boolean recursion[],int index)
	{
		if(recursion[index])
			return true;
		if(visited[index])
			return false;
		visited[index]=true;
		recursion[index]=true;
		List<Integer> childList = adj.get(index);
		for(Integer child:childList)
		{
			if(iscycleExist(adj,visited,recursion,child))
				return true;
		}
		recursion[index]=false;
		return false;
	}
	public static void main(String[] args) 
	{
		int v=6;
		boolean visited[] = new boolean[v];
		boolean recursion[] = new boolean[v];
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
		for(int i=0;i<v;i++)
		{
			adj.add(i , new ArrayList<Integer>());
		}
		addEdges(adj,0,1);
		addEdges(adj,0,2);
		addEdges(adj,1,2);
		addEdges(adj,2,0);
		addEdges(adj,2,3);
		addEdges(adj,3,3);
		System.out.println(checkDFS(adj,visited,recursion,v));
	}
}
