import java.util.*;
public class GraphProblem {
	
    
	public static void addEdge(int u,int v,ArrayList<ArrayList<Integer>> graph,int indegree[]) {
		
		graph.get(u).add(v);
		
		indegree[v]++;
	}
	public static void mintimetaken(ArrayList<ArrayList<Integer>> graph,int indegree[],int V) {
		
		Queue<Integer> q = new LinkedList<Integer>();
		int ans[] = new int[V+1];
		
		for(int i=1;i<V;i++) {
			if(indegree[i]==0) {
				q.add(i);
				ans[i]=1;
			}
		}
		while(!q.isEmpty()) {
			
			int parent = q.peek();
			q.remove();
			for(int child:graph.get(parent)) {
				
				indegree[child]--;
				if(indegree[child]==0) {
					
					ans[child] = ans[parent]+1;
					q.add(child);
				}
			}
		}
		for(int i=1;i<V;i++) {
			System.out.println(ans[i]);
		}
	}
	public static void main(String[] args) {
	
		int V=11;
		ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
		int indegree[] = new int[V+1];
				
		for(int i=0;i<V;i++) {
			
			graph.add(i,new ArrayList<Integer>());
		}
		
		addEdge(1, 3,graph,indegree);
	    addEdge(1, 4,graph,indegree);
	    addEdge(1, 5,graph,indegree);
	    addEdge(2, 3,graph,indegree);
	    addEdge(2, 8,graph,indegree);
	    addEdge(2, 9,graph,indegree);
	    addEdge(3, 6,graph,indegree);
	    addEdge(4, 6,graph,indegree);
	    addEdge(4, 8,graph,indegree);
	    addEdge(5, 8,graph,indegree);
	    addEdge(6, 7,graph,indegree);
	    addEdge(7, 8,graph,indegree);
	    addEdge(8, 10,graph,indegree);
		
	    mintimetaken(graph,indegree,V);
	}

}
