//Detect Cycle by using Disjoint set Union and and Disjoint rank union
Disjoint union.
import java.util.*;
public class GraphProblem 
{
	static int V;
	static int E;
	
	static Edge edge[];
	static int parent[];
	class Edge
	{
		int src;
		int des;
	}
	GraphProblem(int v,int e)
	{
		V=v;
		E=e;
		edge=new Edge[V]; 
		parent = new int[V];
		for(int i=0;i<V;i++)
		{
			edge[i]= new Edge();
			parent[i] = i;
		}
	}
	 
	public static int find(int x)
	{
		if(x==parent[x])
			return x;
		int temp = find(parent[x]);
			return temp;
	}
	public static void Union(int x,int y)
	{
		int px = find(x);
		int py = find(y);
		
		if(px!=py)
		{
			parent[px]=py;
		}
	}
	public static int cycleDetect()
	{
		for(int i=0;i<V;i++)
		{
			int px = find(edge[i].src);
			int py = find(edge[i].des);
			
			if(px==py)
				return 1;
			Union(edge[i].src,edge[i].des);
		}
		return 0;
	}
	public static void main(String[] args) 
	{
		GraphProblem gp = new GraphProblem(3,3);
		
		edge[0].src=0;
		edge[0].des=1;
		
		edge[1].src=1;
		edge[1].des=2;
		
		edge[0].src=0;
		edge[0].des=1;
		
		if (cycleDetect()==1)
            System.out.println( "graph contains cycle" );
        else
            System.out.println( "graph doesn't contain cycle" );
	}
}
// Disjoint rank Union.
import java.util.*;
public class GraphProblem 
{
	static int V;
	static int E;
	
	static Edge edge[];
	static int parent[];
	static int rank[];
	class Edge
	{
		int src;
		int des;
	}
	GraphProblem(int v,int e)
	{
		V=v;
		E=e;
		edge=new Edge[V]; 
		parent = new int[V];
		rank = new int[V];
		for(int i=0;i<V;i++)
		{
			edge[i]= new Edge();
			parent[i] = i;
			rank[i] = 1;
		}
	}
	 
	public static int find(int x)
	{
		if(x==parent[x])
			return x;
		int temp = find(parent[x]);
		parent[x] =temp;
			return temp;
	}
	public static void Union(int x,int y)
	{
		int px = find(x);
		int py = find(y);
		
		if(px!=py)
		{
			if(rank[px]<rank[py])
			{
				parent[px]=py;
			}
			else if(rank[px]>rank[py])
			{
				parent[py]=px;
			}
			else
			{
				parent[px]=py;
				rank[py]++;
			}
		}
	}
	public static int cycleDetect()
	{
		for(int i=0;i<V;i++)
		{
			int px = find(edge[i].src);
			int py = find(edge[i].des);
			
			if(px==py)
				return 1;
			Union(edge[i].src,edge[i].des);
		}
		return 0;
	}
	public static void main(String[] args) 
	{
		GraphProblem gp = new GraphProblem(3,3);
		
		edge[0].src=0;
		edge[0].des=1;
		
		edge[1].src=1;
		edge[1].des=2;
		
		edge[0].src=0;
		edge[0].des=1;
		
		if (cycleDetect()==1)
            System.out.println( "graph contains cycle" );
        else
            System.out.println( "graph doesn't contain cycle" );
	}
}
