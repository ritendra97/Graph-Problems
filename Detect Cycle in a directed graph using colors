//Detect Cycle in a directed graph using colors
import java.util.*;
public class Graph 
{
	int V;
	ArrayList<ArrayList<Integer>> graph;
	int visited[];
	int white = 0;
	int gray =  1;
	int black = 2;
    Graph(int v)
	{
		V=v;
		graph = new ArrayList<ArrayList<Integer>>(V);
		visited = new int[V];
		for(int i=0;i<v;i++)
		{
			visited[i]=white;
			graph.add(i, new ArrayList<Integer>());
		}
	}
    public void addEdge(int v,int u)
    {
    	graph.get(v).add(u);
    }
    public boolean DFSUtil(int s, int[] visited)  
    {
    	
    	visited[s]=gray;
    	for(Integer child : graph.get(s))
    	{
    		if(visited[child]==gray)
    			return true;
    		if (visited[child] == white && DFSUtil(child,visited) == true)// Here we have parent child relationship
    			//it means that if child is not parent like it's is not being processed already.
                return true;
    	}
    	visited[s]=black;
    	return false;
    }
    public boolean isCyclic() 
    { 
            for (int i = 0; i <V; i++)  
            { 
                if (visited[i] == white) 
                { 
                    if(DFSUtil(i, visited) == true)  
                        return true; 
                }  
            } 
            return false; 
  
    } 
	public static void main(String[] args) 
	{
		Graph g = new Graph(4); 
        g.addEdge(0,1); 
        g.addEdge(0,2); 
        g.addEdge(1,2); 
        g.addEdge(2,0); 
        g.addEdge(2,3); 
        g.addEdge(3,3); 
        System.out.println(g.isCyclic());
	}
}
