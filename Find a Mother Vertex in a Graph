//Find a Mother Vertex in a Graph
import java.util.*;
public class GraphProblem 
{
	ArrayList<ArrayList<Integer>> adj;
	boolean visited[];
	static void addEdge(ArrayList<ArrayList<Integer>> adj,int v,int e)
	{
		adj.get(v).add(e);
	}
	static void DFS(ArrayList<ArrayList<Integer>> adj,boolean visited[],int start)
	{
	    Stack<Integer> st = new Stack<Integer>();
	    st.push(start);
	    visited[start]=true;
	    while(!st.isEmpty())
	    {
	    	Integer node = st.pop();
	    	List<Integer> childList = adj.get(node);
	    	for(Integer child:childList)
	    	{
	    		if(!visited[child])
		    	{
		    		DFS(adj,visited,child);
		    	}
	    	}
	    	
	    }
	}
	static int mothercheck(ArrayList<ArrayList<Integer>> adj,int v)
	{
		boolean visited[] = new boolean[v];
		int ans_index=-1;
		for(int i=0;i<v;i++)
		{
			if(!visited[i])
			{
				DFS(adj,visited,i);
				ans_index=i;
			}
		}
		boolean check[] = new boolean[v];
		DFS(adj,check,ans_index);
		for(boolean ans : check)
		{
			if(!ans)
				return -1;
		}
		return ans_index;
	}
	public static void main(String[] args) 
	{
		int v=7;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
		for(int i=0;i<v;i++)
		{
			adj.add(i,new ArrayList<Integer>());
		}
		addEdge(adj,0,2);
		addEdge(adj,0,1);
		addEdge(adj,5,2);
		addEdge(adj,5,6);
		addEdge(adj,6,4);
		addEdge(adj,6,0);
		addEdge(adj,4,1);
		addEdge(adj,1,3);
		System.out.println("The mother index is: "+mothercheck(adj,v));
	}
}
