// below code will come with null pointer if you run this but it is working on leetcode 
import java.util.*;
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> neighbors) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
}
public class Graph 
{
	public Node clonegraph(Node node)
	{
		if(node==null)
			return null;
		HashMap<Node,Node> map = new HashMap<>();
		Queue<Node> q = new LinkedList<>();
		q.add(node);
		map.put(node,new Node(node.val,new ArrayList<>()));
		while(!q.isEmpty())
		{
			Node cloneNode = q.remove();
			for(Node c:cloneNode.neighbors)
			{
				if(!map.containsKey(c))
				{
					map.put(c,new Node(c.val,new ArrayList<>()));
					q.add(c);
				}
				map.get(cloneNode).neighbors.add(map.get(c));
			}
		}
		return map.get(node);
		
	}
	public Node buildGraph() 
    {
		Node node1 = new Node(1);
		Node node2 = new Node(2);
		Node node3 = new Node(3);
		Node node4 = new Node(4);
		ArrayList<Node> a = new ArrayList<Node>();
		a.add(node2);
		a.add(node4);
		node1.neighbors = a;
		a = new ArrayList<Node>();
		a.add(node3);
		a.add(node1);
		node2.neighbors = a;
		a = new ArrayList<Node>();
		a.add(node2);
		a.add(node4);
		node3.neighbors=a;
		a = new ArrayList<Node>();
		a.add(node3);
		a.add(node1);
		node4.neighbors=a;
		return node1;
    }
	public static void main(String[] args) 
	{
		Graph g = new Graph();
		Node node = g.buildGraph();
		System.out.println(g.clonegraph(node));
	}
}
