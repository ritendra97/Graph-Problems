import java.util.*;
public class GraphProblem 
{
	ArrayList<ArrayList<Integer>> adj;
	boolean visited[];
	GraphProblem(int v)
	{
		adj = new ArrayList<>();
		visited=new boolean[v];
		for(int i=0;i<v;i++)
		{
			adj.add(i,new ArrayList<Integer>());
		}
	}
	void addEdge(int v,int e)
	{
		adj.get(v).add(e);
		adj.get(e).add(v);
	}
	public void BFS(int startindex)
	{
		Queue<Integer> q = new LinkedList<>();
		visited[startindex]=true;
		q.add(startindex);
		while(!q.isEmpty())
		{
			Integer node = q.poll();
			System.out.print(node+" ");
			List<Integer> childList = adj.get(node);
			for(Integer child : childList)
			{
				if(!visited[child])
				{
					q.add(child);
					visited[child]=true;
				}
			}
		}
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(4);
		 
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);
 
        System.out.println("Following is Breadth First Traversal "+"(starting from vertex 2)");
 
        g.BFS(2);
	}
}
