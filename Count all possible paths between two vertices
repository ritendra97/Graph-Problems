//Count all possible paths between two vertices
import java.util.*;
public class GraphProblem 
{
	public int nodes;
	ArrayList<ArrayList<Integer>> graph;
    boolean visited[];
    int count=0;
	GraphProblem(int nodes)
	{
		graph = new ArrayList<ArrayList<Integer>>(nodes);
		visited = new boolean[nodes];
		for(int i=0;i<nodes;i++)
		{
			graph.add(new ArrayList<Integer>());
		}
	}
	public void addEdge(int u,int v)
	{
		graph.get(u).add(v);
	}
	public int countPathsUtil(int u, int d,int pathCount) 
    {
		if(u==d)
			pathCount++;
		else
		{
			List<Integer> childList = graph.get(u);
			for(Integer child:childList)
			{
				pathCount = countPathsUtil(child,d,pathCount);
			}
		}
		return pathCount;
    }
	public int countPaths(int s,int d )
	{
		int count =0; 
		count=countPathsUtil(s,d,count);
		return count;
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(7); 
        g.addEdge(0, 1); 
        g.addEdge(0, 2); 
        g.addEdge(0, 3); 
        g.addEdge(1, 3); 
        g.addEdge(2, 3); 
        g.addEdge(1, 4); 
        g.addEdge(2, 4); 
  
        int s = 0, d = 3; 
        System.out.println("The Path Count is: "+g.countPaths(s, d)); 
	}
}
