//Find whether path exist
import java.util.*;

public class Graph {

	public boolean is_Possible(int[][] grid) {
		int n = grid.length;
		boolean[][] vis = new boolean[n][n];

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					return dfs(i, j, grid, vis);
				}
			}
		}

		return false;
	}

	boolean dfs(int i, int j, int[][] grid, boolean vis[][]) {
		vis[i][j] = true;

		int[][] des = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };

		for (int k = 0; k < 4; k++) {
			if (isSafe(i + des[k][0], j + des[k][1], grid, vis)) {
				if (grid[i + des[k][0]][j + des[k][1]] == 2) {
					return true;
				}
				if (dfs(i + des[k][0], j + des[k][1], grid, vis)) {
					return true;
				}
			}
		}

		return false;
	}

	boolean isSafe(int i, int j, int[][] grid, boolean vis[][]) {
		int n = grid.length;

		if ((i < 0) || (i >= n) || (j < 0) || (j >= n) || (grid[i][j] == 0) || (vis[i][j])) {
			return false;
		}

		return true;
	}

	public static void main(String[] args) {

		Graph g = new Graph();
		int grid[][] = { { 3, 0, 3, 0, 0 }, { 3, 0, 0, 0, 3 }, { 3, 3, 3, 3, 3 }, { 0, 2, 3, 3, 0 },
				{ 3, 0, 0, 1, 3 } };

		System.out.println(g.is_Possible(grid));

	}
}


import java.util.LinkedList;
import java.util.Queue;

class rowandCol {
	int row;
	int col;

	public rowandCol(int row, int col) {
		this.row = row;
		this.col = col;
	}
}

public class Main {

	public static boolean isSafe(int row, int col, boolean visited[][], int matrix[][]) {
		return (row >= 0 && col >= 0 && row < matrix.length && col < matrix[0].length && visited[row][col] == false && matrix[row][col]!=-1);
	}

	public static boolean BFS(int row, int col, int matrix[][]) {

		Queue<rowandCol> q = new LinkedList<rowandCol>();
		boolean visited[][] = new boolean[matrix.length][matrix[0].length];

		q.add(new rowandCol(row, col));
		int rowarr[] = { 1, -1, 0, 0 };
		int colarr[] = { 0, 0, 1, -1 };

		while (q.size() > 0) {
			rowandCol node = q.remove();
			if (node.col == matrix[0].length - 1 && node.row == matrix.length - 1)
				return true;

			for (int i = 0; i < 4; i++) {
				int nextrow = rowarr[i] + node.row;
				int nextcol = colarr[i] + node.col;

				if (isSafe(nextrow, nextcol, visited, matrix)) {
					visited[nextrow][nextcol] = true;
					q.add(new rowandCol(nextrow, nextcol));
				}
			}
		}

		return false;
	}

	public static boolean possiblePath(int matrix[][]) {
		return BFS(0, 0, matrix);
	}

	public static void main(String[] args) {

		int matrix[][] = {  { 0, 0, 0, -1, 0 }, 
							{ -1, 0, 0, -1, -1 }, 
							{ 0, -1, 0, 0, 0 }, 
							{ -1, 0, -1, 0, 0 },
							{ 0, 0, -1, 0, 0 } };
		System.out.print(possiblePath(matrix));

	}
}
