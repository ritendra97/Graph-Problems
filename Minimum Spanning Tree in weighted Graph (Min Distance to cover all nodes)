Minimum Spanning Tree in weighted Graph (Min Distance to cover all nodes)
import java.util.*;
class Edge
{
	int targetNode;
	int distance;
	Edge(int targetNode,int distance)
	{
		this.targetNode=targetNode;
		this.distance=distance; 
	}
}
public class GraphProblem 
{
	int mincost=0;
	ArrayList<ArrayList<Edge>> graph;
	boolean visited[];
	int V;
	GraphProblem(int v)
	{
		V=v;
		visited = new boolean[V+1];
		graph = new ArrayList<ArrayList<Edge>>(V);
		for(int i=0;i<V;i++)
		{
			graph.add(i,new ArrayList<Edge>());
		}
	}
	public void addEdge(int source,int target,int dis)
	{
		graph.get(source).add(new Edge(target,dis));
		graph.get(target).add(new Edge(source,dis));
	}
	public int mincost(int source)
	{
		PriorityQueue<Edge> pq = new PriorityQueue<>(new Comparator<Edge>() {
			public int compare(Edge e1,Edge e2)
			{
				return e1.distance - e2.distance;
			}
		});
		ArrayList<Edge> Childsources= graph.get(source);
		visited[source]=true;
		for(Edge child: Childsources)
		{
			pq.add(child);
		}
		while(!pq.isEmpty())
		{
			Edge temp = pq.remove();
			if(visited[temp.targetNode]==true)
			{
				continue;
			}
			visited[temp.targetNode]=true;
			mincost=mincost+temp.distance;
			for(Edge edge:graph.get(temp.targetNode))
			{
				if(!visited[edge.targetNode])
					pq.add(edge);
			}
		}
		return mincost;
	}
	public int Prism_MST()
	{
		int min=0;
		for(int i=0;i<V;i++)
		{
			if(!visited[i])
			    min = min+mincost(i);
		}
		return min;
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(9);
		g.addEdge( 0, 1, 4); 
        g.addEdge( 0, 7, 8); 
        g.addEdge( 1, 2, 8); 
        g.addEdge( 1, 7, 11); 
        g.addEdge( 2, 3, 7); 
        g.addEdge( 2, 8, 2); 
        g.addEdge( 2, 5, 4); 
        g.addEdge( 3, 4, 9); 
        g.addEdge( 3, 5, 14); 
        g.addEdge( 4, 5, 10); 
        g.addEdge( 5, 6, 2); 
        g.addEdge( 6, 7, 1); 
        g.addEdge( 6, 8, 6); 
        g.addEdge( 7, 8, 7); 
		System.out.println(g.Prism_MST());
	}
}
