//Detect Cycle in a Directed Graph using BFS
import java.util.*;
public class GraphProblem 
{
	ArrayList<ArrayList<Integer>> graph;
	HashMap<Integer,Integer> incomingdegree;
	Queue<Integer> sourceQueue;
	int visitedNodes=0;
	int nodes;
	GraphProblem(int nodes)
	{
		graph = new ArrayList<ArrayList<Integer>>(nodes);
		incomingdegree = new HashMap<Integer,Integer>();
		sourceQueue = new LinkedList<>();
		for(int i=0;i<nodes;i++)
		{
			graph.add(i, new ArrayList<>());
			incomingdegree.put(i, 0);
		}
	}
	void addEdges(int a,int b)
	{
		graph.get(a).add(b);
		incomingdegree.put(b,incomingdegree.get(b)+1);
	}
	public boolean checkgraphhascycle()
	{
		for(Map.Entry<Integer,Integer> ans:incomingdegree.entrySet())
		{
			if(ans.getValue()==0)
				sourceQueue.add(ans.getKey());
		}
		while(!sourceQueue.isEmpty())
		{
			visitedNodes++;
			int source = sourceQueue.remove();
			List<Integer> childList = graph.get(source);
			for(Integer child : childList)
			{
				incomingdegree.put(child,incomingdegree.get(child)-1);
				if(incomingdegree.get(child)==0)
					sourceQueue.add(child);
			}
		}
		return nodes!=visitedNodes;
	}
	public static void main(String[] args) 
	{
		int nodes = 6;
		GraphProblem g = new GraphProblem(nodes);
		g.addEdges(0, 1);
		g.addEdges(1, 2);
		g.addEdges(2, 0);
		g.addEdges(3, 4);
		g.addEdges(4, 5);
		System.out.println(g.checkgraphhascycle());
	}
}
