//Depth First Search or DFS for a Graph(Directed Graph)
import java.util.Iterator;
import java.util.LinkedList;
//directed Graph
public class GraphProblem 
{
	private int V;
	private LinkedList<Integer> adj[];
	GraphProblem(int v)
	{
		V=v;
		adj = new LinkedList[v];
		for(int i=0;i<v;++i)
		{
			adj[i]=new LinkedList();
		}
	}
	void addEdge(int v,int w)
	{
		adj[v].add(w);
	}
	void DFSUtill(int v,boolean visited[])
	{
		visited[v]=true;
		System.out.print(v+" ");
		Iterator<Integer> i = adj[v].listIterator();
		while(i.hasNext())
		{
			int n = i.next();
			if(!visited[n])
			{
				DFSUtill(n,visited);
			}
		}
	}
	void DFS(int v)
	{
		boolean visited[] = new boolean[V];
		for(int i=0;i<V;i++)
		{
			if(visited[i]==false)
			{
				DFSUtill(i,visited);
			}
		}
		
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(4);
		 
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);
 
        System.out.println(
            "Following is Depth First Traversal "
            + "(starting from vertex 2)");
 
        g.DFS(2);
	}
}
