import java.util.*;
class Edge
{
	int v;
	int weight;
	Edge(int v,int weight)
	{
		this.v=v;
		this.weight=weight;
	}
}
public class Graph 
{
	int V;
	int j=0;
	ArrayList<ArrayList<Edge>> graph;
	Graph(int v)
	{
		V=v;
		graph = new ArrayList<ArrayList<Edge>>(V) ;
		for(int i=0;i<V;i++)
		{
			graph.add(new ArrayList<Edge>());
		}
	}
	public void addEdge(int v,int u,int w)
	{
		graph.get(v).add(new Edge(u,w));
	}
	public void dfs(int src,boolean visited[],int departure[])
	{
		visited[src]=true;
		for(int i=0;i<V;i++)
		{
			if(!visited[i])
			  dfs(i,visited,departure);
		}
		departure[j++]=src;
	}
	public void findLongestDistance(int src)
	{
		int departure[] = new int[V];
		boolean visited[]= new boolean[V];
		
		dfs(src,visited,departure);
		int val[] = new int[V];
		int parent[] = new int[V];
		Arrays.fill(val,Integer.MIN_VALUE);
		
		val[src]=0;
		for(int i=V-1;i>=0;i--)
		{
			int s = departure[i];

		    for(Edge child :graph.get(s))
			{
				int v = child.v;
				int w = child.weight;
				if(val[s]!=Integer.MIN_VALUE && val[s]+w>val[v])
				{
					parent[v]=s;
					val[v] = val[s]+w;
				}
			}
		}
		for(int i:val)
		{
			System.out.println(i);
		}
	}
	public static void main(String[] args) 
	{
		Graph g = new Graph(6);
		
		g.addEdge(0, 1, 5);
	    g.addEdge(0, 2, 3);
	    g.addEdge(1, 3, 6);
	    g.addEdge(1, 2, 2);
	    g.addEdge(2, 4, 4);
	    g.addEdge(2, 5, 2);
	    g.addEdge(2, 3, 7);
	    g.addEdge(3, 5, 1);
	    g.addEdge(3, 4, -1);
	    g.addEdge(4, 5, -2);
	 
		g.findLongestDistance(1);
	}
}
