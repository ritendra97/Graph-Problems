 Shortest Path in Directed Acyclic Graph
 import java.util.*;

class Edge
{
	int v;
	int dis;
	Edge(int v,int dis)
	{
		this.v=v;
		this.dis=dis;
	}
}
class Index
{
	int index=0;
}
public class Graph 
{
	int V;
	int j =0;
	ArrayList<ArrayList<Edge>> graph;
	boolean visited[];
	Graph(int v)
	{
		V=v;
		graph = new ArrayList<ArrayList<Edge>>(V);
		visited = new boolean[V];
		for(int i=1;i<=V;i++)
		{
			graph.add(new ArrayList<Edge>());
		}
	}
	void addEdge(int u,int v,int dis)
	{
		graph.get(u).add(new Edge(v,dis));
	}
	public void dfsUtil(int src,boolean visited[],int departure[])
    {
    	visited[src]=true;
    	for(Edge child :graph.get(src))
    	{
    		if(!visited[child.v])
    			dfsUtil(child.v,visited,departure);
    	}
    	departure[j++]=src;
    }
	public void shortestPath(int s)
	{
		boolean visited[]= new boolean[V];
		int departure[] = new int[V];
    	for(int i =0;i<V;i++)
    	{
    		if(!visited[i])
    		{
    			dfsUtil(i,visited,departure);
    		}
    	}
		int distance[] = new int[V];
		for(int i=0;i<V;i++)
		{
			distance[i]=Integer.MAX_VALUE;
		}
		distance[s]=0;
		for(int i=V-1;i>=0;i--)
		{
			int v = departure[i];
			if(distance[v]!=Integer.MAX_VALUE)
			{
				for(Edge e: graph.get(v))
				{
					int u = e.v;
					int d = e.dis;
					if(distance[v]!=Integer.MAX_VALUE && distance[v]+d<distance[u])
						distance[u]=distance[v]+d;
				}
			}
		}
		for (int i = 0; i < V; i++) {
            System.out.printf("dist(%d, %d) = %2d\n", s, i, distance[i]);
        }
	}
	public static void main(String[] args) 
	{
		Graph g = new Graph(6);
		
		g.addEdge(0, 1, 5); 
        g.addEdge(0, 2, 3); 
        g.addEdge(1, 3, 6); 
        g.addEdge(1, 2, 2); 
        g.addEdge(2, 4, 4); 
        g.addEdge(2, 5, 2); 
        g.addEdge(2, 3, 7); 
        g.addEdge(3, 4, -1); 
        g.addEdge(4, 5, -2);
        
        int s = 1;
        
        g.shortestPath(s); 
	}
}
