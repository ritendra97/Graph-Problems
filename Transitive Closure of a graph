import java.util.*;
public class GraphProblem 
{
	int V;
	ArrayList<ArrayList<Integer>> adj;
	int tc[][];
	GraphProblem(int v)
	{
		V=v;
		tc = new int[V][V];
		adj = new ArrayList<ArrayList<Integer>>(V);
		for(int i=0;i<V;i++)
		{
			adj.add(i,new ArrayList<Integer>());
		}
	}
	public void addEdge(int u,int v)
	{
		adj.get(u).add(v);
	}
	public void transitiveClosure()
	{
		for(int i=0;i<V;i++)
		{
			dfs(i,i);
		}
		
		for(int i=0;i<V;i++)
		{
			System.out.println(Arrays.toString(tc[i]));
		}
	}
	public void dfs(int s,int v)
	{
		tc[s][v]=1;
		for(Integer adjacent:adj.get(s))
		{
			if(tc[s][adjacent]==0)
				dfs(s,adjacent);
		}
		
	}
	public static void main(String[] args) 
	{
		GraphProblem gp = new GraphProblem(4);
		
		gp.addEdge(0,1);
		gp.addEdge(0,2);
		gp.addEdge(1,2);
		gp.addEdge(2,0);
		gp.addEdge(2,3);
		gp.addEdge(3,3);
		
		gp.transitiveClosure();
	}
}
