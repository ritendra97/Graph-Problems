//Check Path Exist
import java.util.*;
public class GraphProblem 
{
	int V;
	ArrayList<ArrayList<Integer>> graph;
	boolean visited[];
	GraphProblem(int v)
	{
		V=v;
		visited = new boolean[V];
		graph = new ArrayList<ArrayList<Integer>>(V);
		for(int i=0;i<V;i++)
		{
			graph.add(i,new ArrayList<Integer>());
		}
	}
	public void addEdge(int v,int w)
	{
		graph.get(v).add(w);
	}
	public boolean dfshasPath(int src, int des)
	{
		if(src==des)
			return true;
		visited[src]=true;
		for(Integer nbr:graph.get(src))
		{
			if(!visited[nbr])
			{
				boolean hasnbrPath = dfshasPath(nbr,des);
				if(hasnbrPath==true)
					return true;
			}
		}
		return false;
	}
	public void sourcedesPath(int src,int des)
	{
		boolean answer = dfshasPath(src,des);
		if(answer)
			System.out.println("Yes path exist:");
		else
			System.out.println("path doesn't exist:");
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(5);
		g.addEdge(1, 2);
	    g.addEdge(2, 3);
	    g.addEdge(1, 4);
	    g.sourcedesPath(1,4);
	}
}
import java.util.LinkedList;
import java.util.Queue;

class pair{
    int row;
    int col;

    public pair(int row, int col) {
        this.row = row;
        this.col = col;
    }
}
public class Main4 {

    public static boolean Helper(Queue<pair> q, int mat[][]){

        int row[] = {1,-1,0,0};
        int col[] = {0,0,1,-1};

        while (!q.isEmpty()){
            pair temp = q.remove();

            if(mat[temp.row][temp.col]==2) return true;

            for(int i = 0;i<4;i++){

                int new_row = temp.row+row[i];
                int new_col = temp.col+col[i];
                if(new_row<mat.length && new_row>=0 && new_col<mat[0].length && new_col>=0 && mat[new_row][new_col]!=0){
                    q.add(new pair(new_row,new_col));
                }
            }
        }
        return false;
    }

    public static boolean Solution(int mat[][]){

        Queue<pair> q = new LinkedList<>();

        for(int i = 0;i<mat.length;i++){
            for(int j = 0;j<mat[0].length;j++){
                if(mat[i][j]==1){
                  q.add(new pair(i,j));
                }
            }
        }

        return Helper(q,mat);
    }
    public static void main(String[] args){

        int mat[][] = {{0,3,2},
                       {3,3,0},
                       {1,3,0}};
        System.out.println(Solution(mat));
    }
}
