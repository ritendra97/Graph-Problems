//Check whether a given graph is Bipartite or not
//This is the solution that u will use everywhere
import java.util.*;
public class GraphProblem 
{ 
	static void addEdge(ArrayList<ArrayList<Integer>> adj,int u, int v) 
    { 
       adj.get(u).add(v); 
       adj.get(v).add(u); 
    } 
	static boolean isBipartite(ArrayList<ArrayList<Integer>> adj,int v, boolean visited[],int color[]) 
    {  
        for(int u : adj.get(v))
        { 
            if (visited[u] == false)
            { 
                visited[u] = true; 
                color[u] = 1 - color[v]; 
                if (!isBipartite(adj, u, visited, color)) 
                   return false; 
            } 
                else if (color[u] == color[v]) 
                   return false; 
         } 
         return true; 
    } 
	public static void main(String[] args) 
	{
		int N = 6; 
	    ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>(N + 1); 
	    for(int i = 0; i <= N; i++)
	    {
	        adj.add(new ArrayList<Integer>());
	    }
	    boolean visited[] = new boolean[N + 1]; 
	    int color[] = new int[N + 1]; 
	    Arrays.fill(color, -1);
	    addEdge(adj, 1, 2); 
	    addEdge(adj, 2, 3); 
	    addEdge(adj, 3, 4); 
	    addEdge(adj, 4, 5); 
	    addEdge(adj, 5, 6); 
	    addEdge(adj, 6, 1); 
	    visited[1] = true; 
	    color[1] = 0; 
	    if (isBipartite(adj, 1, visited, color))
	    { 
	        System.out.println("Graph is Bipartite"); 
	    } 
	    else
	    { 
	        System.out.println("Graph is not Bipartite"); 
	    } 
	}
}
//This below code we are in doubt whether it is right or not
import java.util.*;
public class GraphProblem 
{ 
	int V;
	ArrayList<ArrayList<Integer>> graph;
	int color[];
	boolean visited[];
	GraphProblem(int v)
	{
		V=v;
		graph=new ArrayList<ArrayList<Integer>>(V);
		color = new int[V];
		visited = new boolean[V];
		for(int i=0;i<V;i++) 
		{
			graph.add(i,new ArrayList<Integer>());
		}
		Arrays.fill(color, -1);
	}
	public void addEdge(int v,int w)
	{
		graph.get(v).add(w);
		graph.get(w).add(v);
	}
	public boolean dfsUtil(int cr,int start)
	{
		boolean flag=true;
		color[start]=cr;
		visited[start]=true;
		List<Integer> childList = graph.get(start);
		for(Integer child:childList)
		{
			if(color[child]==-1)
			{
				flag=dfsUtil(1-cr,child);
				if(!flag)
					return false;
			}
			else if(color[start]==color[child])
				return false;
		}
		return true;
	}
	public boolean checkbipartitate(int s)
	{
		boolean flag = true;
		for(int i=0;i<s;i++)
		{
			if(!visited[i])
			{
				flag = dfsUtil(0,i);
				if(!flag)
					return false;
			}
		}
		return true;
	}
	public static void main(String[] args) 
	{
		GraphProblem g = new GraphProblem(4);
		g.addEdge(0,1);
		g.addEdge(0,3);
		g.addEdge(1,2);
		g.addEdge(2,3);
		System.out.println(g.checkbipartitate(4));
	}
}
